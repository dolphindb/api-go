package api

import (
	"context"
	"net"
	"os"
	"strings"
	"testing"

	"github.com/stretchr/testify/assert"
)

const testAddress = "127.0.0.1:3003"

func TestAccount(t *testing.T) {
	db, err := NewDolphinDBClient(context.TODO(), testAddress, nil)
	assert.Nil(t, err)

	loginReq := new(LoginRequest).
		SetPassword("password").
		SetUserID("user")
	err = db.Login(loginReq)
	assert.Nil(t, err)

	err = db.Logout()
	assert.Nil(t, err)
}

func TestMain(m *testing.M) {
	exit := make(chan bool)

	ln, err := net.Listen("tcp", testAddress)
	if err != nil {
		return
	}
	go func() {
		for !isExit(exit) {
			conn, err := ln.Accept()
			if err != nil {
				return
			}

			go handleData(conn)
		}

		ln.Close()
	}()

	exitCode := m.Run()

	close(exit)

	os.Exit(exitCode)
}

func handleData(conn net.Conn) {
	defer conn.Close()

	res := make([]byte, 0)
	for {
		buf := make([]byte, 512)
		l, err := conn.Read(buf)
		if err != nil {
			continue
		}

		res = append(res, buf[0:l]...)
		script := string(res)
		length := len(res)
		var resp []byte
		switch {
		case (length == 62 || length == 57) && strings.Index(script, "schema") > 0:
			resp = []byte{0x32, 0x37, 0x38, 0x30, 0x30, 0x39, 0x30, 0x36, 0x35, 0x30, 0x20, 0x31, 0x20, 0x31, 0x0a, 0x4f, 0x4b, 0x0a, 0x19, 0x05, 0x12, 0x01, 0x0c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x74, 0x65, 0x73, 0x00, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x00, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65,
				0x00, 0x6b, 0x65, 0x65, 0x70, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x00, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x47, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x00, 0x63, 0x6f, 0x6c, 0x44, 0x65, 0x66, 0x73, 0x00, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x50, 0x61, 0x74, 0x68, 0x00, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x00, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x00, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
				0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x00, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x00, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x00, 0x19, 0x01, 0x0c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x01, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x01, 0x65, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x4a, 0x4b, 0x00, 0x00, 0x49, 0x4b, 0x00, 0x00, 0x48, 0x4b, 0x00, 0x00, 0x47, 0x4b, 0x00, 0x00, 0x46, 0x4b, 0x00, 0x00, 0x45, 0x4b, 0x00, 0x00, 0x44, 0x4b, 0x00, 0x00, 0x43, 0x4b, 0x00, 0x00, 0x42, 0x4b, 0x00,
				0x00, 0x41, 0x4b, 0x00, 0x00, 0x40, 0x4b, 0x00, 0x00, 0x3f, 0x4b, 0x00, 0x00, 0x3e, 0x4b, 0x00, 0x00, 0x3d, 0x4b, 0x00, 0x00, 0x3c, 0x4b, 0x00, 0x00, 0x3b, 0x4b, 0x00, 0x00, 0x3a, 0x4b, 0x00, 0x00, 0x39, 0x4b, 0x00, 0x00, 0x38, 0x4b, 0x00, 0x00, 0x37, 0x4b, 0x00, 0x00, 0x36, 0x4b, 0x00, 0x00, 0x35, 0x4b, 0x00, 0x00, 0x34, 0x4b, 0x00, 0x00, 0x33, 0x4b, 0x00, 0x00, 0x32, 0x4b, 0x00, 0x00, 0x31, 0x4b, 0x00, 0x00, 0x30, 0x4b, 0x00, 0x00, 0x2f, 0x4b, 0x00, 0x00, 0x2e, 0x4b, 0x00, 0x00, 0x2d, 0x4b, 0x00, 0x00, 0x2c, 0x4b, 0x00, 0x00, 0x2b, 0x4b, 0x00, 0x00, 0x2a, 0x4b, 0x00, 0x00, 0x29, 0x4b, 0x00, 0x00, 0x28, 0x4b, 0x00, 0x00, 0x27,
				0x4b, 0x00, 0x00, 0x26, 0x4b, 0x00, 0x00, 0x25, 0x4b, 0x00, 0x00, 0x24, 0x4b, 0x00, 0x00, 0x23, 0x4b, 0x00, 0x00, 0x22, 0x4b, 0x00, 0x00, 0x21, 0x4b, 0x00, 0x00, 0x20, 0x4b, 0x00, 0x00, 0x1f, 0x4b, 0x00, 0x00, 0x1e, 0x4b, 0x00, 0x00, 0x1d, 0x4b, 0x00, 0x00, 0x1c, 0x4b, 0x00, 0x00, 0x1b, 0x4b, 0x00, 0x00, 0x1a, 0x4b, 0x00, 0x00, 0x19, 0x4b, 0x00, 0x00, 0x18, 0x4b, 0x00, 0x00, 0x17, 0x4b, 0x00, 0x00, 0x16, 0x4b, 0x00, 0x00, 0x15, 0x4b, 0x00, 0x00, 0x14, 0x4b, 0x00, 0x00, 0x13, 0x4b, 0x00, 0x00, 0x12, 0x4b, 0x00, 0x00, 0x11, 0x4b, 0x00, 0x00, 0x10, 0x4b, 0x00, 0x00, 0x0f, 0x4b, 0x00, 0x00, 0x0e, 0x4b, 0x00, 0x00, 0x0d, 0x4b, 0x00,
				0x00, 0x0c, 0x4b, 0x00, 0x00, 0x0b, 0x4b, 0x00, 0x00, 0x0a, 0x4b, 0x00, 0x00, 0x09, 0x4b, 0x00, 0x00, 0x08, 0x4b, 0x00, 0x00, 0x07, 0x4b, 0x00, 0x00, 0x06, 0x4b, 0x00, 0x00, 0x05, 0x4b, 0x00, 0x00, 0x04, 0x4b, 0x00, 0x00, 0x03, 0x4b, 0x00, 0x00, 0x02, 0x4b, 0x00, 0x00, 0x01, 0x4b, 0x00, 0x00, 0x00, 0x4b, 0x00, 0x00, 0xff, 0x4a, 0x00, 0x00, 0xfe, 0x4a, 0x00, 0x00, 0xfd, 0x4a, 0x00, 0x00, 0xfc, 0x4a, 0x00, 0x00, 0xfb, 0x4a, 0x00, 0x00, 0xfa, 0x4a, 0x00, 0x00, 0xf9, 0x4a, 0x00, 0x00, 0xf8, 0x4a, 0x00, 0x00, 0xf7, 0x4a, 0x00, 0x00, 0xf6, 0x4a, 0x00, 0x00, 0xf5, 0x4a, 0x00, 0x00, 0xf4, 0x4a, 0x00, 0x00, 0xf3, 0x4a, 0x00, 0x00, 0xf2,
				0x4a, 0x00, 0x00, 0xf1, 0x4a, 0x00, 0x00, 0xf0, 0x4a, 0x00, 0x00, 0xef, 0x4a, 0x00, 0x00, 0xee, 0x4a, 0x00, 0x00, 0xed, 0x4a, 0x00, 0x00, 0xec, 0x4a, 0x00, 0x00, 0xeb, 0x4a, 0x00, 0x00, 0xea, 0x4a, 0x00, 0x00, 0xe9, 0x4a, 0x00, 0x00, 0xe8, 0x4a, 0x00, 0x00, 0xe7, 0x4a, 0x00, 0x00, 0xe6, 0x4a, 0x00, 0x00, 0x04, 0x00, 0x05, 0x00, 0x00, 0x00, 0x12, 0x00, 0x4f, 0x4c, 0x41, 0x50, 0x00, 0x12, 0x00, 0x41, 0x4c, 0x4c, 0x00, 0x12, 0x00, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x00, 0x00, 0x06, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x00, 0x74, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x00, 0x74,
				0x79, 0x70, 0x65, 0x49, 0x6e, 0x74, 0x00, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x12, 0x01, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x61, 0x74, 0x65, 0x00, 0x73, 0x79, 0x6d, 0x00, 0x12, 0x01, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x44, 0x41, 0x54, 0x45, 0x00, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x00, 0x04, 0x01, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x12, 0x01, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x04, 0x01, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
				0x00, 0x04, 0x01, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x12, 0x01, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x61, 0x74, 0x65, 0x00, 0x73, 0x79, 0x6d, 0x00, 0x12, 0x01, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x00, 0x48, 0x41, 0x53, 0x48, 0x00, 0x04, 0x01, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00}
		case isSuccessRequest(length):
			resp = []byte{0x32, 0x30, 0x32, 0x36, 0x37, 0x33, 0x35, 0x39, 0x20, 0x30, 0x20, 0x31, 0x0a, 0x4f, 0x4b, 0x0a}
		case length == 149 || length == 141:
			resp = []byte{0x32, 0x30, 0x32, 0x36, 0x37, 0x33, 0x35, 0x39, 0x20, 0x31, 0x20, 0x31, 0x0a, 0x4f, 0x4b, 0x0a, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00}
		case length == 43 || length == 50:
			resp = []byte{0x31, 0x38, 0x32, 0x33, 0x32, 0x38, 0x39, 0x31, 0x37, 0x36, 0x20, 0x31, 0x20, 0x31, 0x0a, 0x4f,
				0x4b, 0x0a, 0x00, 0x06, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x69, 0x64, 0x00, 0x78, 0x00, 0x12, 0x01, 0x03,
				0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x58, 0x4f, 0x4d, 0x00, 0x47, 0x53, 0x00, 0x41, 0x41, 0x50, 0x4c, 0x00, 0x10, 0x01,
				0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x86, 0x59, 0x40, 0x33, 0x33, 0x33, 0x33, 0x33,
				0xb3, 0x40, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x52, 0x40}
		case length == 82 && strings.Index(script, "getClusterLiveDataNodes") > 0:
			resp = []byte{0x32, 0x38, 0x35, 0x36, 0x30, 0x35, 0x34, 0x32, 0x36, 0x33, 0x20, 0x31, 0x20, 0x31, 0x0a, 0x4f, 0x4b, 0x0a, 0x12,
				0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x31, 0x32, 0x37, 0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x31, 0x3a, 0x33,
				0x30, 0x30, 0x33, 0x3a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x33, 0x30, 0x30, 0x33, 0x00}
		case length == 35 && strings.Index(script, "schema") > 0:
			resp = []byte{0x32, 0x37, 0x38, 0x30, 0x30, 0x39, 0x30, 0x36, 0x35, 0x30, 0x20, 0x31, 0x20, 0x31, 0x0a, 0x4f, 0x4b,
				0x0a, 0x19, 0x05, 0x12, 0x01, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
				0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x00, 0x70, 0x61, 0x72, 0x74, 0x69,
				0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x00, 0x70, 0x61, 0x72,
				0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x00, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
				0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x00, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
				0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x00, 0x63, 0x6f, 0x6c, 0x44, 0x65, 0x66, 0x73, 0x00, 0x19, 0x01,
				0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x12, 0x00, 0x73, 0x79, 0x6d, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x12, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x74, 0x00, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00,
				0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x06, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x74, 0x79,
				0x70, 0x65, 0x49, 0x6e, 0x74, 0x00, 0x04, 0x01, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,
				0x00, 0x12, 0x00, 0x00, 0x00}
		case length == 51 || length == 55:
			resp = []byte{0x32, 0x30, 0x32, 0x36, 0x37, 0x33, 0x35, 0x39, 0x20, 0x31, 0x20, 0x31, 0x0a, 0x4f, 0x4b, 0x0a, 0x01, 0x00, 0x00}
		}

		if len(resp) > 0 {
			_, err = conn.Write(resp)
			if err != nil {
				return
			}

			res = make([]byte, 0)
		}
	}
}

var successLength = []int{33, 48, 95, 67, 52, 57, 54, 63, 15, 40, 42, 45, 44, 78, 89, 90, 79, 87, 64, 53, 34, 41, 49, 60, 150, 30, 59}

func isSuccessRequest(l int) bool {
	for _, v := range successLength {
		if v == l {
			return true
		}
	}

	return false
}

func isExit(exit <-chan bool) bool {
	select {
	case <-exit:
		return true
	default:
		return false
	}
}

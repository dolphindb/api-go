package test

import (
	"bytes"
	"context"
	"testing"
	"time"

	"github.com/dolphindb/api-go/api"
	"github.com/dolphindb/api-go/dialer/protocol"
	"github.com/dolphindb/api-go/model"
	"github.com/dolphindb/api-go/test/setup"
	. "github.com/smartystreets/goconvey/convey"
)

func Test_Scalar_DownLoad_Datatype_bool(t *testing.T) {
	Convey("Test_scalar_bool:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_bool_not_null:", func() {
			s, err := db.RunScript("true")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldBeTrue)
			So(reType, ShouldEqual, 1)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "bool")
			form := result.GetDataForm()
			So(form, ShouldEqual, 0)
		})
		Convey("Test_scalar_bool_null:", func() {
			s, err := db.RunScript("bool()")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			reType := result.GetDataType()
			So(result.IsNull(), ShouldEqual, true)
			So(reType, ShouldEqual, 1)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "bool")
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_DownLoad_Datatype_blob(t *testing.T) {
	Convey("Test_scalar_blob:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_blob_not_null:", func() {
			s, err := db.RunScript("str='hello';blob(str)")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.Value()
			So(re, ShouldResemble, []uint8{104, 101, 108, 108, 111})
			reType := result.GetDataType()
			So(reType, ShouldEqual, 32)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "blob")
			by := bytes.NewBufferString("")
			w := protocol.NewWriter(by)
			err = result.Render(w, protocol.LittleEndian)
			w.Flush()
			So(err, ShouldBeNil)
			So(by.String(), ShouldNotBeNil)
		})
		Convey("Test_scalar_blob_null:", func() {
			s, err := db.RunScript("str='';blob(str)")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.Value()
			So(re, ShouldResemble, []uint8(nil))
			reType := result.GetDataType()
			So(reType, ShouldEqual, 32)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "blob")
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_DownLoad_Datatype_void(t *testing.T) {
	Convey("Test_scalar_void:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_void_not_null:", func() {
			s, err := db.RunScript("NULL")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			reType := result.GetDataType()
			So(reType, ShouldEqual, 0)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "void")
			by := bytes.NewBufferString("")
			w := protocol.NewWriter(by)
			err = result.Render(w, protocol.LittleEndian)
			w.Flush()
			So(err, ShouldBeNil)
			So(by.String(), ShouldNotBeNil)
		})
		Convey("Test_scalar_void_null:", func() {
			data, _ := model.NewDataType(model.DtVoid, []byte{12})
			s := model.NewScalar(data)
			So(s.GetDataTypeString(), ShouldEqual, "void")
			So(s.Value(), ShouldEqual, "void(null)")
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_DownLoad_Datatype_char(t *testing.T) {
	Convey("Test_scalar_char:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_char_not_null:", func() {
			s, err := db.RunScript("97c")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, 97)
			So(reType, ShouldEqual, 2)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "char")
		})
		Convey("Test_scalar_char_null:", func() {
			s, err := db.RunScript("char()")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			reType := result.GetDataType()
			So(result.IsNull(), ShouldEqual, true)
			So(reType, ShouldEqual, 2)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "char")
			get := result.String()
			So(get, ShouldEqual, "char()")
			row := result.Rows()
			So(row, ShouldEqual, 1)
			result1 := s.(*model.Scalar).SetNull
			So(result1, ShouldNotBeNil)
			result.SetNull()
		})
		Convey("Test_scalar_char_eql_max_range(2^7-1):", func() {
			s, err := db.RunScript("char(127)")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, 127)
			So(reType, ShouldEqual, 2)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "char")
			s1, err := db.RunScript("char(-127)")
			So(err, ShouldBeNil)
			result1 := s1.(*model.Scalar)
			re1 := result1.DataType.Value()
			reType1 := result1.GetDataType()
			So(re1, ShouldEqual, -127)
			So(reType1, ShouldEqual, 2)
			reTypeString1 := result1.GetDataTypeString()
			So(reTypeString1, ShouldEqual, "char")
		})
		Convey("Test_scalar_char_over_range:", func() {
			s, err := db.RunScript("char(128)")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			reType := result.GetDataType()
			So(result.IsNull(), ShouldBeTrue)
			So(reType, ShouldEqual, 2)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "char")
			s1, err := db.RunScript("char(-128)")
			So(err, ShouldBeNil)
			result1 := s1.(*model.Scalar)
			reType1 := result1.GetDataType()
			So(result1.IsNull(), ShouldEqual, true)
			So(reType1, ShouldEqual, 2)
			reTypeString1 := result1.GetDataTypeString()
			So(reTypeString1, ShouldEqual, "char")
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_DownLoad_Datatype_short(t *testing.T) {
	Convey("Test_scalar_short:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_short_not_null:", func() {
			s, err := db.RunScript("100h")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, 100)
			So(reType, ShouldEqual, 3)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "short")
		})
		Convey("Test_scalar_short_null:", func() {
			s, err := db.RunScript("short()")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			reType := result.GetDataType()
			So(result.IsNull(), ShouldEqual, true)
			So(reType, ShouldEqual, 3)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "short")
		})
		Convey("Test_scalar_short_negative:", func() {
			s, err := db.RunScript("-112h")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, -112)
			So(reType, ShouldEqual, 3)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "short")
		})
		Convey("Test_scalar_short_eql_2^10:", func() {
			s, err := db.RunScript("1024h")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, 1024)
			So(reType, ShouldEqual, 3)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "short")
		})
		Convey("Test_scalar_short_small_2^10:", func() {
			s, err := db.RunScript("1022h")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, 1022)
			So(reType, ShouldEqual, 3)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "short")
		})
		Convey("Test_scalar_short_big 2^10:", func() {
			s, err := db.RunScript("1026h")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, 1026)
			So(reType, ShouldEqual, 3)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "short")
		})
		Convey("Test_scalar_short_eql_max_range(2^15-1):", func() {
			s, err := db.RunScript("a = short(pow(2,15)-1);a")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, 32767)
			So(reType, ShouldEqual, 3)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "short")
			s1, err := db.RunScript("a = short(-32767);a")
			So(err, ShouldBeNil)
			result1 := s1.(*model.Scalar)
			re1 := result1.DataType.Value()
			reType1 := result1.GetDataType()
			So(re1, ShouldEqual, -32767)
			So(reType1, ShouldEqual, 3)
			reTypeString1 := result1.GetDataTypeString()
			So(reTypeString1, ShouldEqual, "short")
		})
		Convey("Test_scalar_short_over_range:", func() {
			s, err := db.RunScript("a = short(32768);a")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			reType := result.GetDataType()
			So(result.IsNull(), ShouldEqual, true)
			So(reType, ShouldEqual, 3)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "short")
			s1, err := db.RunScript("a = short(-32768);a")
			So(err, ShouldBeNil)
			result1 := s1.(*model.Scalar)
			reType1 := result1.GetDataType()
			So(result1.IsNull(), ShouldEqual, true)
			So(reType1, ShouldEqual, 3)
			reTypeString1 := result1.GetDataTypeString()
			So(reTypeString1, ShouldEqual, "short")
			by := bytes.NewBufferString("")
			w := protocol.NewWriter(by)
			by.Reset()
			err = result.Render(w, protocol.LittleEndian)
			So(err, ShouldBeNil)
			w.Flush()
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_DownLoad_Datatype_int(t *testing.T) {
	Convey("Test_scalar_int:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_int_not_null:", func() {
			s, err := db.RunScript("100")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, 100)
			So(reType, ShouldEqual, 4)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "int")
			by := bytes.NewBufferString("")
			w := protocol.NewWriter(by)
			by.Reset()
			err = result.Render(w, protocol.LittleEndian)
			So(err, ShouldBeNil)
			w.Flush()
		})
		Convey("Test_scalar_int_null:", func() {
			s, err := db.RunScript("int()")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			reType := result.GetDataType()
			So(result.IsNull(), ShouldEqual, true)
			So(reType, ShouldEqual, 4)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "int")
		})
		Convey("Test_scalar_int_negative:", func() {
			s, err := db.RunScript("-100")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, -100)
			So(reType, ShouldEqual, 4)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "int")
		})
		Convey("Test_scalar_int_eql_2^10:", func() {
			s, err := db.RunScript("a = int(1024);a")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, 1024)
			So(reType, ShouldEqual, 4)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "int")
		})
		Convey("Test_scalar_int_small_2^10:", func() {
			s, err := db.RunScript("a = int(1022);a")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, 1022)
			So(reType, ShouldEqual, 4)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "int")
		})
		Convey("Test_scalar_int_big_2^10:", func() {
			s, err := db.RunScript("a = int(1026);a")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, 1026)
			So(reType, ShouldEqual, 4)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "int")
		})
		Convey("Test_scalar_int_eql_2^20:", func() {
			s, err := db.RunScript("a = int(1048576);a")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, 1048576)
			So(reType, ShouldEqual, 4)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "int")
		})
		Convey("Test_scalar_int_small_2^20:", func() {
			s, err := db.RunScript("a = int(1048574);a")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, 1048574)
			So(reType, ShouldEqual, 4)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "int")
		})
		Convey("Test_scalar_int_big_2^20:", func() {
			s, err := db.RunScript("a = int(1048578);a")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, 1048578)
			So(reType, ShouldEqual, 4)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "int")
		})
		Convey("Test_scalar_int_eql_max_range(2^31-1):", func() {
			s, err := db.RunScript("a = int(2147483647);a")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, 2147483647)
			So(reType, ShouldEqual, 4)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "int")
			s1, err := db.RunScript("a = int(-2147483647);a")
			So(err, ShouldBeNil)
			result1 := s1.(*model.Scalar)
			re1 := result1.DataType.Value()
			reType1 := result1.GetDataType()
			So(re1, ShouldEqual, -2147483647)
			So(reType1, ShouldEqual, 4)
			reTypeString1 := result1.GetDataTypeString()
			So(reTypeString1, ShouldEqual, "int")
		})
		Convey("Test_scalar_int_over_range:", func() {
			s, err := db.RunScript("int(2147483648)")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			reType := result.GetDataType()
			So(result.IsNull(), ShouldEqual, true)
			So(reType, ShouldEqual, 4)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "int")
			s1, err := db.RunScript("int(-2147483648)")
			So(err, ShouldBeNil)
			result1 := s1.(*model.Scalar)
			reType1 := result1.GetDataType()
			So(result1.IsNull(), ShouldEqual, true)
			So(reType1, ShouldEqual, 4)
			reTypeString1 := result.GetDataTypeString()
			So(reTypeString1, ShouldEqual, "int")
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_DownLoad_Datatype_long(t *testing.T) {
	Convey("Test_scalar_long:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_long_not_null:", func() {
			s, err := db.RunScript("22l")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, 22)
			So(reType, ShouldEqual, 5)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "long")
			by := bytes.NewBufferString("")
			w := protocol.NewWriter(by)
			by.Reset()
			err = result.Render(w, protocol.LittleEndian)
			So(err, ShouldBeNil)
			w.Flush()
		})
		Convey("Test_scalar_long_null:", func() {
			s, err := db.RunScript("long()")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			reType := result.GetDataType()
			So(result.IsNull(), ShouldEqual, true)
			So(reType, ShouldEqual, 5)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "long")
		})
		Convey("Test_scalar_long_negative:", func() {
			s, err := db.RunScript("-122l")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, -122)
			So(reType, ShouldEqual, 5)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "long")
		})
		Convey("Test_scalar_long_eql_2^10:", func() {
			s, err := db.RunScript("1024l")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, 1024)
			So(reType, ShouldEqual, 5)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "long")
		})
		Convey("Test_scalar_long_small_2^10:", func() {
			s, err := db.RunScript("1022l")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, 1022)
			So(reType, ShouldEqual, 5)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "long")
		})
		Convey("Test_scalar_long_big_2^10:", func() {
			s, err := db.RunScript("1026l")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, 1026)
			So(reType, ShouldEqual, 5)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "long")
		})
		Convey("Test_scalar_long_eql_2^20:", func() {
			s, err := db.RunScript("1048576l")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, 1048576)
			So(reType, ShouldEqual, 5)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "long")
		})
		Convey("Test_scalar_long_small_2^20:", func() {
			s, err := db.RunScript("1048574l")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, 1048574)
			So(reType, ShouldEqual, 5)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "long")
		})
		Convey("Test_scalar_long_big_2^20:", func() {
			s, err := db.RunScript("1048578l")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, 1048578)
			So(reType, ShouldEqual, 5)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "long")
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_DownLoad_Datatype_date(t *testing.T) {
	Convey("Test_scalar_date:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_date_not_null:", func() {
			s, err := db.RunScript("2022.12.31")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			time1 := "2022-12-31 00:00:00"
			t1, _ := time.Parse("2006-01-02 15:04:05", time1)
			So(re, ShouldEqual, t1)
			So(reType, ShouldEqual, 6)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "date")
		})
		Convey("Test_scalar_date_null:", func() {
			s, err := db.RunScript("date()")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			reType := result.GetDataType()
			So(result.IsNull(), ShouldEqual, true)
			So(reType, ShouldEqual, 6)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "date")
		})
		Convey("Test_scalar_date_scalar_early_1970:", func() {
			s, err := db.RunScript("1922.07.28")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			a := result.String()
			So(a, ShouldEqual, "date(1922.07.28)")
			time1 := "1922-07-28 00:00:00"
			t1, _ := time.Parse("2006-01-02 15:04:05", time1)
			So(re, ShouldEqual, t1)
			So(reType, ShouldEqual, 6)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "date")
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_DownLoad_Datatype_month(t *testing.T) {
	Convey("Test_scalar_month:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_month_not_null:", func() {
			s, err := db.RunScript("2022.07M")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			time1 := "2022-07"
			t1, _ := time.Parse("2006-01", time1)
			reType := result.GetDataType()
			So(re, ShouldEqual, t1)
			So(reType, ShouldEqual, 7)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "month")
			So(result.String(), ShouldEqual, "month(2022.07M)")
		})
		Convey("Test_scalar_month_null:", func() {
			s, err := db.RunScript("month()")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			reType := result.GetDataType()
			So(result.IsNull(), ShouldEqual, true)
			So(reType, ShouldEqual, 7)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "month")
		})
		Convey("Test_scalar_month_early_1970:", func() {
			s, err := db.RunScript("1922.07M")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			time1 := "1922-07"
			t1, _ := time.Parse("2006-01", time1)
			reType := result.GetDataType()
			So(re, ShouldEqual, t1)
			So(reType, ShouldEqual, 7)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "month")
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_DownLoad_Datatype_time(t *testing.T) {
	Convey("Test_scalar_time:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_time_not_null:", func() {
			s, err := db.RunScript("14:00:28.008")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			time1 := "1970-01-01T14:00:28.008"
			t1, _ := time.Parse("2006-01-02T15:04:05.000", time1)
			reType := result.GetDataType()
			So(re, ShouldEqual, t1)
			So(reType, ShouldEqual, 8)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "time")
			So(result.String(), ShouldEqual, "time(14:00:28.008)")
		})
		Convey("Test_scalar_time_range:", func() {
			s, err := db.RunScript("23:59:59.999")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			time1 := "1970-01-01T23:59:59.999"
			t1, _ := time.Parse("2006-01-02T15:04:05.000", time1)
			reType := result.GetDataType()
			So(re, ShouldEqual, t1)
			So(reType, ShouldEqual, 8)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "time")
			So(result.String(), ShouldEqual, "time(23:59:59.999)")
		})
		Convey("Test_scalar_time_null:", func() {
			s, err := db.RunScript("time()")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			reType := result.GetDataType()
			So(result.IsNull(), ShouldEqual, true)
			So(reType, ShouldEqual, 8)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "time")
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_DownLoad_Datatype_minute(t *testing.T) {
	Convey("Test_scalar_minute:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_minute_not_null:", func() {
			s, err := db.RunScript("14:00m")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			time1 := "1970-01-01T14:00"
			t1, _ := time.Parse("2006-01-02T15:04", time1)
			reType := result.GetDataType()
			So(re, ShouldEqual, t1)
			So(reType, ShouldEqual, 9)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "minute")
			So(result.String(), ShouldEqual, "minute(14:00m)")
		})
		Convey("Test_scalar_minute_null:", func() {
			s, err := db.RunScript("minute()")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			reType := result.GetDataType()
			So(result.IsNull(), ShouldEqual, true)
			So(reType, ShouldEqual, 9)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "minute")
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_DownLoad_Datatype_second(t *testing.T) {
	Convey("Test_scalar_second:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_second_not_null:", func() {
			s, err := db.RunScript("14:00:20")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			time1 := "1970-01-01T14:00:20"
			t1, _ := time.Parse("2006-01-02T15:04:05", time1)
			reType := result.GetDataType()
			So(re, ShouldEqual, t1)
			So(reType, ShouldEqual, 10)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "second")
			So(result.String(), ShouldEqual, "second(14:00:20)")
		})
		Convey("Test_scalar_second_range:", func() {
			s, err := db.RunScript("23:59:59")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			time1 := "1970-01-01T23:59:59"
			t1, _ := time.Parse("2006-01-02T15:04:05", time1)
			reType := result.GetDataType()
			So(re, ShouldEqual, t1)
			So(reType, ShouldEqual, 10)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "second")
			So(result.String(), ShouldEqual, "second(23:59:59)")
		})
		Convey("Test_scalar_second_null:", func() {
			s, err := db.RunScript("second()")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			reType := result.GetDataType()
			So(result.IsNull(), ShouldEqual, true)
			So(reType, ShouldEqual, 10)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "second")
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_DownLoad_Datatype_dattime(t *testing.T) {
	Convey("Test_scalar_datetime:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_datetime_not_null:", func() {
			s, err := db.RunScript("2022.07.28 14:00:20")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			time1 := "2022-07-28 14:00:20"
			t1, _ := time.Parse("2006-01-02 15:04:05", time1)
			So(re, ShouldEqual, t1)
			So(reType, ShouldEqual, 11)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "datetime")
			So(result.String(), ShouldEqual, "datetime(2022.07.28T14:00:20)")
		})
		Convey("Test_scalar_datetime_range:", func() {
			s, err := db.RunScript("2022.12.31 23:59:59")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			time1 := "2022-12-31 23:59:59"
			t1, _ := time.Parse("2006-01-02 15:04:05", time1)
			So(re, ShouldEqual, t1)
			So(reType, ShouldEqual, 11)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "datetime")
			So(result.String(), ShouldEqual, "datetime(2022.12.31T23:59:59)")
		})
		Convey("Test_scalar_datetime_range_about_2006:", func() {
			s, err := db.RunScript("2006.01.02 15:04:03")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			time1 := "2006-01-02 15:04:03"
			t1, _ := time.Parse("2006-01-02 15:04:05", time1)
			So(re, ShouldEqual, t1)
			So(reType, ShouldEqual, 11)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "datetime")
		})
		Convey("Test_scalar_datetime_null:", func() {
			s, err := db.RunScript("datetime()")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			reType := result.GetDataType()
			So(result.IsNull(), ShouldEqual, true)
			So(reType, ShouldEqual, 11)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "datetime")
		})
		Convey("Test_scalar_datetime_early_1970:", func() {
			s, err := db.RunScript("2022.07.28 14:00:20")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			time1 := "2022-07-28 14:00:20"
			t1, _ := time.Parse("2006-01-02 15:04:05", time1)
			So(re, ShouldEqual, t1)
			So(reType, ShouldEqual, 11)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "datetime")
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_DownLoad_Datatype_timestamp(t *testing.T) {
	Convey("Test_scalar_timestamp:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_timestamp_not_null:", func() {
			s, err := db.RunScript("2022.07.28 14:00:20.008")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			time1 := "2022-07-28 14:00:20.008"
			t1, _ := time.Parse("2006-01-02 15:04:05.000", time1)
			So(re, ShouldEqual, t1)
			So(reType, ShouldEqual, 12)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "timestamp")
			So(result.String(), ShouldEqual, "timestamp(2022.07.28T14:00:20.008)")
		})
		Convey("Test_scalar_timestamp_range:", func() {
			s, err := db.RunScript("2022.12.31 23:59:59.999")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			time1 := "2022-12-31 23:59:59.999"
			t1, _ := time.Parse("2006-01-02 15:04:05.000", time1)
			So(re, ShouldEqual, t1)
			So(reType, ShouldEqual, 12)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "timestamp")
		})
		Convey("Test_scalar_timestamp_range_about_2006:", func() {
			s, err := db.RunScript("2006.01.02 15:04:04.999")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			time1 := "2006-01-02 15:04:04.999"
			t1, _ := time.Parse("2006-01-02 15:04:05.000", time1)
			So(re, ShouldEqual, t1)
			So(reType, ShouldEqual, 12)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "timestamp")
		})
		Convey("Test_scalar_timestamp_null:", func() {
			s, err := db.RunScript("timestamp()")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			reType := result.GetDataType()
			So(result.IsNull(), ShouldEqual, true)
			So(reType, ShouldEqual, 12)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "timestamp")
		})
		Convey("Test_scalar_timestamp_early_1970:", func() {
			s, err := db.RunScript("1922.07.28 14:00:20.008")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			time1 := "1922-07-28 14:00:20.008"
			t1, _ := time.Parse("2006-01-02 15:04:05.000", time1)
			So(re, ShouldEqual, t1)
			So(reType, ShouldEqual, 12)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "timestamp")
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_DownLoad_Datatype_nanotime(t *testing.T) {
	Convey("Test_scalar_nanotime:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_nanotime_not_null:", func() {
			s, err := db.RunScript("14:00:20.008000008")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			time1 := "1970-01-01 14:00:20.008000008"
			t1, _ := time.Parse("2006-01-02 15:04:05.000000000", time1)
			So(re, ShouldEqual, t1)
			So(reType, ShouldEqual, 13)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "nanotime")
			So(result.String(), ShouldEqual, "nanotime(14:00:20.008000008)")
		})
		Convey("Test_scalar_nanotime_range:", func() {
			s, err := db.RunScript("23:59:59.999999999")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			time1 := "1970-01-01 23:59:59.999999999"
			t1, _ := time.Parse("2006-01-02 15:04:05.000000000", time1)
			So(re, ShouldEqual, t1)
			So(reType, ShouldEqual, 13)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "nanotime")
			So(result.String(), ShouldEqual, "nanotime(23:59:59.999999999)")
		})
		Convey("Test_scalar_nanotime_null:", func() {
			s, err := db.RunScript("nanotime()")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			reType := result.GetDataType()
			So(result.IsNull(), ShouldEqual, true)
			So(reType, ShouldEqual, 13)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "nanotime")
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_DownLoad_Datatype_nanotimestamp(t *testing.T) {
	Convey("Test_scalar_nanotimestamp:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_nanotimestamp_not_null:", func() {
			s, err := db.RunScript("2022.07.28 14:00:20.008000008")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			time1 := "2022-07-28 14:00:20.008000008"
			t1, _ := time.Parse("2006-01-02 15:04:05.000000000", time1)
			So(re, ShouldEqual, t1)
			So(reType, ShouldEqual, 14)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "nanotimestamp")
			So(result.String(), ShouldEqual, "nanotimestamp(2022.07.28T14:00:20.008000008)")
		})
		Convey("Test_scalar_nanotimestamp_range:", func() {
			s, err := db.RunScript("2022.12.31 23:59:59.999999999")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			time1 := "2022-12-31 23:59:59.999999999"
			t1, _ := time.Parse("2006-01-02 15:04:05.000000000", time1)
			So(re, ShouldEqual, t1)
			So(reType, ShouldEqual, 14)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "nanotimestamp")
			So(result.String(), ShouldEqual, "nanotimestamp(2022.12.31T23:59:59.999999999)")
		})
		Convey("Test_scalar_nanotimestamp_range_about_2006:", func() {
			s, err := db.RunScript("2006.01.02 15:04:04.999999999")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			time1 := "2006-01-02 15:04:04.999999999"
			t1, _ := time.Parse("2006-01-02 15:04:05.000000000", time1)
			So(re, ShouldEqual, t1)
			So(reType, ShouldEqual, 14)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "nanotimestamp")
			So(result.String(), ShouldEqual, "nanotimestamp(2006.01.02T15:04:04.999999999)")
		})
		Convey("Test_scalar_nanotimestamp_null:", func() {
			s, err := db.RunScript("nanotimestamp()")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			reType := result.GetDataType()
			So(result.IsNull(), ShouldEqual, true)
			So(reType, ShouldEqual, 14)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "nanotimestamp")
		})
		Convey("Test_scalar_nanotimestamp_early_1970:", func() {
			s, err := db.RunScript("1922.07.28 14:00:20.008000008")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			time1 := "1922-07-28 14:00:20.008000008"
			t1, _ := time.Parse("2006-01-02 15:04:05.000000000", time1)
			So(re, ShouldEqual, t1)
			So(reType, ShouldEqual, 14)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "nanotimestamp")
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_DownLoad_Datatype_float(t *testing.T) {
	Convey("Test_scalar_float:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_float_not_null:", func() {
			s, err := db.RunScript("2.1f")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, 2.1)
			So(reType, ShouldEqual, 15)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "float")
		})
		Convey("Test_scalar_float_null:", func() {
			s, err := db.RunScript("float()")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			reType := result.GetDataType()
			So(result.IsNull(), ShouldEqual, true)
			So(reType, ShouldEqual, 15)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "float")
		})
		Convey("Test_scalar_float_negative:", func() {
			s, err := db.RunScript("-2.1f")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, -2.1)
			So(reType, ShouldEqual, 15)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "float")
		})
		Convey("Test_scalar_float_eql_2^10:", func() {
			s, err := db.RunScript("1024f")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, 1024)
			So(reType, ShouldEqual, 15)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "float")
			by := bytes.NewBufferString("")
			w := protocol.NewWriter(by)
			by.Reset()
			err = result.Render(w, protocol.LittleEndian)
			So(err, ShouldBeNil)
			w.Flush()
		})
		Convey("Test_scalar_float_small_2^10:", func() {
			s, err := db.RunScript("1022f")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, 1022)
			So(reType, ShouldEqual, 15)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "float")
		})
		Convey("Test_scalar_float_big_2^10:", func() {
			s, err := db.RunScript("1026f")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, 1026)
			So(reType, ShouldEqual, 15)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "float")
		})
		Convey("Test_scalar_float_eql_2^20:", func() {
			s, err := db.RunScript("1048576f")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, 1048576)
			So(reType, ShouldEqual, 15)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "float")
		})
		Convey("Test_scalar_float_small_2^20:", func() {
			s, err := db.RunScript("1048574f")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, 1048574)
			So(reType, ShouldEqual, 15)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "float")
		})
		Convey("Test_scalar_float_big_2^20:", func() {
			s, err := db.RunScript("1048578f")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, 1048578)
			So(reType, ShouldEqual, 15)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "float")
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_DownLoad_Datatype_double(t *testing.T) {
	Convey("Test_scalar_double:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_double_not_null:", func() {
			s, err := db.RunScript("2.1")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, 2.1)
			So(reType, ShouldEqual, 16)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "double")
			by := bytes.NewBufferString("")
			w := protocol.NewWriter(by)
			err = result.Render(w, protocol.LittleEndian)
			w.Flush()
			So(err, ShouldBeNil)
			So(by.String(), ShouldNotBeNil)
		})
		Convey("Test_scalar_double_null:", func() {
			s, err := db.RunScript("double()")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			reType := result.GetDataType()
			So(result.IsNull(), ShouldEqual, true)
			So(reType, ShouldEqual, 16)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "double")
		})
		Convey("Test_scalar_double_negative:", func() {
			s, err := db.RunScript("-2.1")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, -2.1)
			So(reType, ShouldEqual, 16)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "double")
		})
		Convey("Test_scalar_double_eql_2^10:", func() {
			s, err := db.RunScript("1024.0")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, 1024.0)
			So(reType, ShouldEqual, 16)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "double")
		})
		Convey("Test_scalar_double_small_2^10:", func() {
			s, err := db.RunScript("1022.0")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, 1022.0)
			So(reType, ShouldEqual, 16)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "double")
		})
		Convey("Test_scalar_double_big_2^10:", func() {
			s, err := db.RunScript("1026.0")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, 1026.0)
			So(reType, ShouldEqual, 16)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "double")
		})
		Convey("Test_scalar_double_eql_2^20:", func() {
			s, err := db.RunScript("1048576.0")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, 1048576.0)
			So(reType, ShouldEqual, 16)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "double")
		})
		Convey("Test_scalar_double_small_2^20:", func() {
			s, err := db.RunScript("1048574.0")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, 1048574.0)
			So(reType, ShouldEqual, 16)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "double")
		})
		Convey("Test_scalar_double_big_2^20:", func() {
			s, err := db.RunScript("1048578.0")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, 1048578.0)
			So(reType, ShouldEqual, 16)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "double")
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_DownLoad_Datatype_string(t *testing.T) {
	Convey("Test_scalar_string:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_string_not_null:", func() {
			s, err := db.RunScript(`"helloworld"`)
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, "helloworld")
			So(reType, ShouldEqual, 18)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "string")
		})
		Convey("Test_scalar_string_null:", func() {
			s, err := db.RunScript("string()")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			reType := result.GetDataType()
			So(result.IsNull(), ShouldEqual, true)
			So(reType, ShouldEqual, 18)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "string")
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_DownLoad_Datatype_uuid(t *testing.T) {
	Convey("Test_scalar_uuid:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_uuid_not_null:", func() {
			s, err := db.RunScript("uuid('5d212a78-cc48-e3b1-4235-b4d91473ee87')")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, "5d212a78-cc48-e3b1-4235-b4d91473ee87")
			So(reType, ShouldEqual, 19)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "uuid")
		})
		Convey("Test_scalar_uuid_null:", func() {
			s, err := db.RunScript("uuid()")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			reType := result.GetDataType()
			So(result.Value(), ShouldEqual, "00000000-0000-0000-0000-000000000000")
			So(reType, ShouldEqual, 19)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "uuid")
			by := bytes.NewBufferString("")
			w := protocol.NewWriter(by)
			by.Reset()
			err = result.Render(w, protocol.LittleEndian)
			So(err, ShouldBeNil)
			w.Flush()
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_DownLoad_Datatype_datehour(t *testing.T) {
	Convey("Test_scalar_datehour:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_datehour_not_null:", func() {
			s, err := db.RunScript("datehour('2022.07.28T14')")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			time1 := "2022-07-28T14"
			t1, _ := time.Parse("2006-01-02T15", time1)
			So(re, ShouldEqual, t1)
			So(reType, ShouldEqual, 28)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "dateHour")
			So(result.String(), ShouldEqual, "dateHour(2022.07.28T14)")
		})
		Convey("Test_scalar_datehour_null:", func() {
			s, err := db.RunScript("datehour()")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			reType := result.GetDataType()
			So(result.IsNull(), ShouldEqual, true)
			So(reType, ShouldEqual, 28)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "dateHour")
		})
		Convey("Test_scalar_datehour_early_1970:", func() {
			s, err := db.RunScript("datehour('1922.07.28T14')")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			time1 := "1922-07-28T14"
			t1, _ := time.Parse("2006-01-02T15", time1)
			So(re, ShouldEqual, t1)
			So(reType, ShouldEqual, 28)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "dateHour")
			by := bytes.NewBufferString("")
			w := protocol.NewWriter(by)
			by.Reset()
			err = result.Render(w, protocol.LittleEndian)
			So(err, ShouldBeNil)
			w.Flush()
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_DownLoad_Datatype_ipaddr(t *testing.T) {
	Convey("Test_scalar_ipaddr:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_ipaddr_not_null:", func() {
			s, err := db.RunScript("ipaddr('35dd:4ae6:b1b1:3da9:d777:d2ab:74cc:e05')")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, "35dd:4ae6:b1b1:3da9:d777:d2ab:74cc:e05")
			So(reType, ShouldEqual, 30)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "IP")
		})
		Convey("Test_scalar_ipaddr_null:", func() {
			s, err := db.RunScript("ipaddr()")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			reType := result.GetDataType()
			So(result.IsNull(), ShouldEqual, true)
			So(reType, ShouldEqual, 30)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "IP")
			by := bytes.NewBufferString("")
			w := protocol.NewWriter(by)
			by.Reset()
			err = result.Render(w, protocol.LittleEndian)
			So(err, ShouldBeNil)
			w.Flush()
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_DownLoad_Datatype_int128(t *testing.T) {
	Convey("Test_scalar_int128:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_int128_not_null:", func() {
			s, err := db.RunScript("int128('e1671797c52e15f763380b45e841ec32')")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, "e1671797c52e15f763380b45e841ec32")
			So(reType, ShouldEqual, 31)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "int128")
			by := bytes.NewBufferString("")
			w := protocol.NewWriter(by)
			by.Reset()
			err = result.Render(w, protocol.LittleEndian)
			So(err, ShouldBeNil)
			w.Flush()
		})
		Convey("Test_scalar_int128_null:", func() {
			s, err := db.RunScript("int128()")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			reType := result.GetDataType()
			So(result.IsNull(), ShouldEqual, true)
			So(reType, ShouldEqual, 31)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "int128")
			by := bytes.NewBufferString("")
			w := protocol.NewWriter(by)
			by.Reset()
			err = result.Render(w, protocol.LittleEndian)
			So(err, ShouldBeNil)
			w.Flush()
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_DownLoad_Datatype_complex(t *testing.T) {
	Convey("Test_scalar_complex:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_complex_not_null:", func() {
			s, err := db.RunScript(`complex(2,5)`)
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, "2.00000+5.00000i")
			So(reType, ShouldEqual, 34)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "complex")
		})
		Convey("Test_scalar_complex_zero:", func() {
			s, err := db.RunScript("complex(0,0)")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, "0.00000+0.00000i")
			So(reType, ShouldEqual, 34)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "complex")
		})
		Convey("Test_scalar_complex_nagative:", func() {
			s, err := db.RunScript(`complex(-2,-5)`)
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, "-2.00000+-5.00000i")
			So(reType, ShouldEqual, 34)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "complex")
		})
		Convey("Test_scalar_complex_eql_2^10:", func() {
			s, err := db.RunScript(`complex(1024,1024)`)
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, "1024.00000+1024.00000i")
			So(reType, ShouldEqual, 34)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "complex")
		})
		Convey("Test_scalar_complex_small_2^10:", func() {
			s, err := db.RunScript(`complex(1022,1022)`)
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, "1022.00000+1022.00000i")
			So(reType, ShouldEqual, 34)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "complex")
		})
		Convey("Test_scalar_complex_big_2^10:", func() {
			s, err := db.RunScript(`complex(1026,1026)`)
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, "1026.00000+1026.00000i")
			So(reType, ShouldEqual, 34)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "complex")
		})
		Convey("Test_scalar_complex_eql_2^20:", func() {
			s, err := db.RunScript(`complex(1048576,1048576)`)
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, "1048576.00000+1048576.00000i")
			So(reType, ShouldEqual, 34)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "complex")
		})
		Convey("Test_scalar_complex_small_2^20:", func() {
			s, err := db.RunScript(`complex(-1.7976931348623157e+308,1048574)`)
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, "")
			So(reType, ShouldEqual, 34)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "complex")
		})
		Convey("Test_scalar_complex_big_2^20:", func() {
			s, err := db.RunScript(`complex(1048578,1048578)`)
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, "1048578.00000+1048578.00000i")
			So(reType, ShouldEqual, 34)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "complex")
			by := bytes.NewBufferString("")
			w := protocol.NewWriter(by)
			by.Reset()
			err = result.Render(w, protocol.LittleEndian)
			So(err, ShouldBeNil)
			w.Flush()
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_DownLoad_Datatype_point(t *testing.T) {
	Convey("Test_scalar_point:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_point_not_null:", func() {
			s, err := db.RunScript(`point(2,5)`)
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, "(2.00000, 5.00000)")
			So(reType, ShouldEqual, 35)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "point")
		})
		Convey("Test_scalar_point_zero:", func() {
			s, err := db.RunScript("point(0,0)")
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, "(0.00000, 0.00000)")
			So(reType, ShouldEqual, 35)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "point")
		})
		Convey("Test_scalar_point_negative:", func() {
			s, err := db.RunScript(`point(-2,-5)`)
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, "(-2.00000, -5.00000)")
			So(reType, ShouldEqual, 35)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "point")
		})
		Convey("Test_scalar_point_eql_2^10:", func() {
			s, err := db.RunScript(`point(1024,1024)`)
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, "(1024.00000, 1024.00000)")
			So(reType, ShouldEqual, 35)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "point")
		})
		Convey("Test_scalar_point_small_2^10:", func() {
			s, err := db.RunScript(`point(1022.5,1022.2)`)
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, "(1022.50000, 1022.20000)")
			So(reType, ShouldEqual, 35)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "point")
		})
		Convey("Test_scalar_point_big_2^10:", func() {
			s, err := db.RunScript(`point(1026.5,1026.2)`)
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, "(1026.50000, 1026.20000)")
			So(reType, ShouldEqual, 35)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "point")
		})
		Convey("Test_scalar_point_eql_2^20:", func() {
			s, err := db.RunScript(`point(1048576.0,1048576.0)`)
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, "(1048576.00000, 1048576.00000)")
			So(reType, ShouldEqual, 35)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "point")
		})
		Convey("Test_scalar_point_small_2^20:", func() {
			s, err := db.RunScript(`point(1048574.0,1048574.0)`)
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, "(1048574.00000, 1048574.00000)")
			So(reType, ShouldEqual, 35)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "point")
		})
		Convey("Test_scalar_point_big_2^20:", func() {
			s, err := db.RunScript(`point(1048578.0,1048578.0)`)
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, "(1048578.00000, 1048578.00000)")
			So(reType, ShouldEqual, 35)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "point")
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_DownLoad_Datatype_duration(t *testing.T) {
	Convey("Test_scalar_duration:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_duration_H:", func() {
			s, err := db.RunScript(`duration("1H")`)
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, "1H")
			So(reType, ShouldEqual, 36)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "duration")
		})
		Convey("Test_scalar_duration_s:", func() {
			s, err := db.RunScript(`duration("1s")`)
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, "1s")
			So(reType, ShouldEqual, 36)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "duration")
		})
		Convey("Test_scalar_duration_m:", func() {
			s, err := db.RunScript(`duration("2m")`)
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, "2m")
			So(reType, ShouldEqual, 36)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "duration")
		})
		Convey("Test_scalar_duration_M:", func() {
			s, err := db.RunScript(`duration("3M")`)
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, "3M")
			So(reType, ShouldEqual, 36)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "duration")
		})
		Convey("Test_scalar_duration_y:", func() {
			s, err := db.RunScript(`duration("5y")`)
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, "5y")
			So(reType, ShouldEqual, 36)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "duration")
			result.SetNull()
		})
		Convey("Test_scalar_duration_d:", func() {
			s, err := db.RunScript(`duration("20d")`)
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, "20d")
			So(reType, ShouldEqual, 36)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "duration")
		})
		Convey("Test_scalar_duration_w:", func() {
			s, err := db.RunScript(`duration("52w")`)
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, "52w")
			So(reType, ShouldEqual, 36)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "duration")
		})
		Convey("Test_scalar_duration_B:", func() {
			s, err := db.RunScript(`duration("16B")`)
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, "16B")
			So(reType, ShouldEqual, 36)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "duration")
		})
		Convey("Test_scalar_duration_ms:", func() {
			s, err := db.RunScript(`duration("10ms")`)
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, "10ms")
			So(reType, ShouldEqual, 36)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "duration")
			by := bytes.NewBufferString("")
			w := protocol.NewWriter(by)
			by.Reset()
			err = result.Render(w, protocol.LittleEndian)
			So(err, ShouldBeNil)
			w.Flush()
		})
		Convey("Test_scalar_duration_ns:", func() {
			s, err := db.RunScript(`duration("1ns")`)
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, "1ns")
			So(reType, ShouldEqual, 36)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "duration")
		})
		Convey("Test_scalar_duration_us:", func() {
			s, err := db.RunScript(`duration("1us")`)
			So(err, ShouldBeNil)
			result := s.(*model.Scalar)
			re := result.DataType.Value()
			reType := result.GetDataType()
			So(re, ShouldEqual, "1us")
			So(reType, ShouldEqual, 36)
			reTypeString := result.GetDataTypeString()
			So(reTypeString, ShouldEqual, "duration")
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_UpLoad_Datatype_int(t *testing.T) {
	Convey("Test_scalar_int_upload:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_int:", func() {
			dt, _ := model.NewDataType(model.DtInt, int32(6))
			s := model.NewScalar(dt)
			df, _ := db.Upload(map[string]model.DataForm{"s": s})
			res, err := db.RunScript("s")
			ty, _ := db.RunScript("typestr(s)")
			re := res.(*model.Scalar)
			So(re.Value(), ShouldEqual, 6)
			So(res, ShouldResemble, s)
			So(err, ShouldBeNil)
			So(ty.String(), ShouldEqual, "string(INT)")
			So(df.GetDataForm(), ShouldEqual, model.DfScalar)
			So(res.GetDataType(), ShouldEqual, model.DtInt)
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_UpLoad_Datatype_bool(t *testing.T) {
	Convey("Test_scalar_bool_upload:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_bool:", func() {
			dt, err := model.NewDataType(model.DtBool, byte(1))
			So(err, ShouldBeNil)
			s := model.NewScalar(dt)
			df, err := db.Upload(map[string]model.DataForm{"s": s})
			So(err, ShouldBeNil)
			res, err := db.RunScript("s")
			So(err, ShouldBeNil)
			ty, err := db.RunScript("typestr(s)")
			So(err, ShouldBeNil)
			re := res.(*model.Scalar)
			So(re.Value(), ShouldEqual, true)
			So(res, ShouldResemble, s)
			So(err, ShouldBeNil)
			So(ty.String(), ShouldEqual, "string(BOOL)")
			So(df.GetDataForm(), ShouldEqual, model.DfScalar)
			So(res.GetDataType(), ShouldEqual, model.DtBool)
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_UpLoad_Datatype_blob(t *testing.T) {
	Convey("Test_scalar_blob_upload:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_blob:", func() {
			dt, _ := model.NewDataType(model.DtBlob, []byte{1})
			s := model.NewScalar(dt)
			df, _ := db.Upload(map[string]model.DataForm{"s": s})
			res, err := db.RunScript("s")
			ty, _ := db.RunScript("typestr(s)")
			re := res.(*model.Scalar)
			So(re.Value(), ShouldResemble, []uint8{1})
			So(res, ShouldResemble, s)
			So(err, ShouldBeNil)
			So(ty.String(), ShouldEqual, "string(BLOB)")
			So(df.GetDataForm(), ShouldEqual, model.DfScalar)
			So(res.GetDataType(), ShouldEqual, model.DtBlob)
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_UpLoad_Datatype_char(t *testing.T) {
	Convey("Test_scalar_char_upload:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_char:", func() {
			dt, _ := model.NewDataType(model.DtChar, uint8(21))
			s := model.NewScalar(dt)
			df, _ := db.Upload(map[string]model.DataForm{"s": s})
			res, err := db.RunScript("s")
			ty, _ := db.RunScript("typestr(s)")
			re := res.(*model.Scalar)
			So(re.Value(), ShouldEqual, 21)
			So(res, ShouldResemble, s)
			So(err, ShouldBeNil)
			So(ty.String(), ShouldEqual, "string(CHAR)")
			So(df.GetDataForm(), ShouldEqual, model.DfScalar)
			So(res.GetDataType(), ShouldEqual, model.DtChar)
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_UpLoad_Datatype_short(t *testing.T) {
	Convey("Test_scalar_short_upload:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_short:", func() {
			dt, _ := model.NewDataType(model.DtShort, int16(28452))
			s := model.NewScalar(dt)
			df, _ := db.Upload(map[string]model.DataForm{"s": s})
			res, err := db.RunScript("s")
			ty, _ := db.RunScript("typestr(s)")
			re := res.(*model.Scalar)
			So(re.Value(), ShouldEqual, 28452)
			So(res, ShouldResemble, s)
			So(err, ShouldBeNil)
			So(ty.String(), ShouldEqual, "string(SHORT)")
			So(df.GetDataForm(), ShouldEqual, model.DfScalar)
			So(res.GetDataType(), ShouldEqual, model.DtShort)
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_UpLoad_Datatype_long(t *testing.T) {
	Convey("Test_scalar_long_upload:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_long:", func() {
			dt, _ := model.NewDataType(model.DtLong, int64(154655631))
			s := model.NewScalar(dt)
			df, _ := db.Upload(map[string]model.DataForm{"s": s})
			res, err := db.RunScript("s")
			ty, _ := db.RunScript("typestr(s)")
			re := res.(*model.Scalar)
			So(re.Value(), ShouldEqual, 154655631)
			So(res, ShouldResemble, s)
			So(err, ShouldBeNil)
			So(ty.String(), ShouldEqual, "string(LONG)")
			So(df.GetDataForm(), ShouldEqual, model.DfScalar)
			So(res.GetDataType(), ShouldEqual, model.DtLong)
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_UpLoad_Datatype_date(t *testing.T) {
	Convey("Test_scalar_date_upload:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_date:", func() {
			dt, err := model.NewDataType(model.DtDate, time.Date(2022, 3, 8, 0, 0, 0, 0, time.UTC))
			So(err, ShouldBeNil)
			s := model.NewScalar(dt)
			df, _ := db.Upload(map[string]model.DataForm{"s": s})
			res, err := db.RunScript("s")
			ty, _ := db.RunScript("typestr(s)")
			re := res.(*model.Scalar)
			time1 := "2022-03-08 00:00:00"
			t1, _ := time.Parse("2006-01-02 15:04:05", time1)
			So(re.Value(), ShouldEqual, t1)
			So(res, ShouldResemble, s)
			So(err, ShouldBeNil)
			So(ty.String(), ShouldEqual, "string(DATE)")
			So(df.GetDataForm(), ShouldEqual, model.DfScalar)
			So(res.GetDataType(), ShouldEqual, model.DtDate)
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_UpLoad_Datatype_month(t *testing.T) {
	Convey("Test_scalar_month_upload:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_date:", func() {
			dt, err := model.NewDataType(model.DtMonth, time.Date(2022, 3, 8, 0, 0, 0, 0, time.UTC))
			So(err, ShouldBeNil)
			s := model.NewScalar(dt)
			df, _ := db.Upload(map[string]model.DataForm{"s": s})
			res, err := db.RunScript("s")
			ty, _ := db.RunScript("typestr(s)")
			re := res.(*model.Scalar)
			time1 := "2022-03"
			t1, _ := time.Parse("2006-01", time1)
			So(re.Value(), ShouldEqual, t1)
			So(res, ShouldResemble, s)
			So(err, ShouldBeNil)
			So(ty.String(), ShouldEqual, "string(MONTH)")
			So(df.GetDataForm(), ShouldEqual, model.DfScalar)
			So(res.GetDataType(), ShouldEqual, model.DtMonth)
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_UpLoad_Datatype_datetime(t *testing.T) {
	Convey("Test_scalar_datetime_upload:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_datetime:", func() {
			dt, err := model.NewDataType(model.DtDatetime, time.Date(2022, 3, 8, 23, 59, 59, 0, time.UTC))
			So(err, ShouldBeNil)
			s := model.NewScalar(dt)
			df, _ := db.Upload(map[string]model.DataForm{"s": s})
			res, err := db.RunScript("s")
			ty, _ := db.RunScript("typestr(s)")
			re := res.(*model.Scalar)
			time1 := "2022-03-08 23:59:59"
			t1, _ := time.Parse("2006-01-02 15:04:05", time1)
			So(re.Value(), ShouldEqual, t1)
			So(res, ShouldResemble, s)
			So(err, ShouldBeNil)
			So(ty.String(), ShouldEqual, "string(DATETIME)")
			So(df.GetDataForm(), ShouldEqual, model.DfScalar)
			So(res.GetDataType(), ShouldEqual, model.DtDatetime)
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_UpLoad_Datatype_time(t *testing.T) {
	Convey("Test_scalar_time_upload:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_time:", func() {
			dt, err := model.NewDataType(model.DtTime, time.Date(0, 0, 0, 23, 59, 59, 999000000, time.UTC))
			So(err, ShouldBeNil)
			s := model.NewScalar(dt)
			df, _ := db.Upload(map[string]model.DataForm{"s": s})
			res, err := db.RunScript("s")
			ty, _ := db.RunScript("typestr(s)")
			re := res.(*model.Scalar)
			time1 := "1970-01-01T23:59:59.999"
			t1, _ := time.Parse("2006-01-02T15:04:05.000", time1)
			So(re.Value(), ShouldEqual, t1)
			So(res, ShouldResemble, s)
			So(err, ShouldBeNil)
			So(ty.String(), ShouldEqual, "string(TIME)")
			So(df.GetDataForm(), ShouldEqual, model.DfScalar)
			So(res.GetDataType(), ShouldEqual, model.DtTime)
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_UpLoad_Datatype_timestamp(t *testing.T) {
	Convey("Test_scalar_timestamp_upload:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_timestamp:", func() {
			dt, err := model.NewDataType(model.DtTimestamp, time.Date(1969, 12, 31, 23, 59, 59, 999000000, time.UTC))
			So(err, ShouldBeNil)
			s := model.NewScalar(dt)
			df, _ := db.Upload(map[string]model.DataForm{"s": s})
			res, err := db.RunScript("s")
			ty, _ := db.RunScript("typestr(s)")
			re := res.(*model.Scalar)
			time1 := "1969-12-31T23:59:59.999"
			t1, _ := time.Parse("2006-01-02T15:04:05.000", time1)
			So(re.Value(), ShouldEqual, t1)
			So(res, ShouldResemble, s)
			So(err, ShouldBeNil)
			So(ty.String(), ShouldEqual, "string(TIMESTAMP)")
			So(df.GetDataForm(), ShouldEqual, model.DfScalar)
			So(res.GetDataType(), ShouldEqual, model.DtTimestamp)
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_UpLoad_Datatype_minute(t *testing.T) {
	Convey("Test_scalar_minute_upload:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_minute:", func() {
			dt, err := model.NewDataType(model.DtMinute, time.Date(0, 0, 0, 23, 59, 0, 0, time.UTC))
			So(err, ShouldBeNil)
			s := model.NewScalar(dt)
			df, _ := db.Upload(map[string]model.DataForm{"s": s})
			res, err := db.RunScript("s")
			ty, _ := db.RunScript("typestr(s)")
			re := res.(*model.Scalar)
			time1 := "1970-01-01T23:59"
			t1, _ := time.Parse("2006-01-02T15:04", time1)
			So(re.Value(), ShouldEqual, t1)
			So(res, ShouldResemble, s)
			So(err, ShouldBeNil)
			So(ty.String(), ShouldEqual, "string(MINUTE)")
			So(df.GetDataForm(), ShouldEqual, model.DfScalar)
			So(res.GetDataType(), ShouldEqual, model.DtMinute)
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_UpLoad_Datatype_second(t *testing.T) {
	Convey("Test_scalar_second_upload:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_second:", func() {
			dt, err := model.NewDataType(model.DtSecond, time.Date(0, 0, 0, 23, 59, 59, 0, time.UTC))
			So(err, ShouldBeNil)
			s := model.NewScalar(dt)
			df, _ := db.Upload(map[string]model.DataForm{"s": s})
			res, err := db.RunScript("s")
			ty, _ := db.RunScript("typestr(s)")
			re := res.(*model.Scalar)
			time1 := "1970-01-01T23:59:59"
			t1, _ := time.Parse("2006-01-02T15:04:05", time1)
			So(re.Value(), ShouldEqual, t1)
			So(res, ShouldResemble, s)
			So(err, ShouldBeNil)
			So(ty.String(), ShouldEqual, "string(SECOND)")
			So(df.GetDataForm(), ShouldEqual, model.DfScalar)
			So(res.GetDataType(), ShouldEqual, model.DtSecond)
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_UpLoad_Datatype_nanotime(t *testing.T) {
	Convey("Test_scalar_nanotime_upload:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_nanotime:", func() {
			dt, err := model.NewDataType(model.DtNanoTime, time.Date(0, 0, 0, 23, 59, 59, 999999999, time.UTC))
			So(err, ShouldBeNil)
			s := model.NewScalar(dt)
			df, _ := db.Upload(map[string]model.DataForm{"s": s})
			res, err := db.RunScript("s")
			ty, _ := db.RunScript("typestr(s)")
			re := res.(*model.Scalar)
			time1 := "1970-01-01T23:59:59.999999999"
			t1, _ := time.Parse("2006-01-02T15:04:05.000000000", time1)
			So(re.Value(), ShouldEqual, t1)
			So(res, ShouldResemble, s)
			So(err, ShouldBeNil)
			So(ty.String(), ShouldEqual, "string(NANOTIME)")
			So(df.GetDataForm(), ShouldEqual, model.DfScalar)
			So(res.GetDataType(), ShouldEqual, model.DtNanoTime)
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_UpLoad_Datatype_nanotimestamp(t *testing.T) {
	Convey("Test_scalar_nanotimestamp_upload:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_nanotimestamp:", func() {
			dt, err := model.NewDataType(model.DtNanoTimestamp, time.Date(2022, 12, 31, 23, 59, 59, 999999999, time.UTC))
			So(err, ShouldBeNil)
			s := model.NewScalar(dt)
			df, _ := db.Upload(map[string]model.DataForm{"s": s})
			res, err := db.RunScript("s")
			ty, _ := db.RunScript("typestr(s)")
			re := res.(*model.Scalar)
			time1 := "2022-12-31T23:59:59.999999999"
			t1, _ := time.Parse("2006-01-02T15:04:05.000000000", time1)
			So(re.Value(), ShouldEqual, t1)
			So(res, ShouldResemble, s)
			So(err, ShouldBeNil)
			So(ty.String(), ShouldEqual, "string(NANOTIMESTAMP)")
			So(df.GetDataForm(), ShouldEqual, model.DfScalar)
			So(res.GetDataType(), ShouldEqual, model.DtNanoTimestamp)
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_UpLoad_Datatype_datehour(t *testing.T) {
	Convey("Test_scalar_datehour_upload:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_datehour:", func() {
			dt, err := model.NewDataType(model.DtDateHour, time.Date(2022, 12, 31, 23, 59, 59, 999999999, time.UTC))
			So(err, ShouldBeNil)
			s := model.NewScalar(dt)
			df, _ := db.Upload(map[string]model.DataForm{"s": s})
			res, err := db.RunScript("s")
			ty, _ := db.RunScript("typestr(s)")
			re := res.(*model.Scalar)
			time1 := "2022-12-31T23"
			t1, _ := time.Parse("2006-01-02T15", time1)
			So(re.Value(), ShouldEqual, t1)
			So(res, ShouldResemble, s)
			So(err, ShouldBeNil)
			So(ty.String(), ShouldEqual, "string(DATEHOUR)")
			So(df.GetDataForm(), ShouldEqual, model.DfScalar)
			So(res.GetDataType(), ShouldEqual, model.DtDateHour)
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_UpLoad_Datatype_float(t *testing.T) {
	Convey("Test_scalar_float_upload:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_float:", func() {
			dt, _ := model.NewDataType(model.DtFloat, float32(28.5))
			s := model.NewScalar(dt)
			df, _ := db.Upload(map[string]model.DataForm{"s": s})
			res, err := db.RunScript("s")
			ty, _ := db.RunScript("typestr(s)")
			re := res.(*model.Scalar)
			So(re.Value(), ShouldEqual, 28.5)
			So(res, ShouldResemble, s)
			So(err, ShouldBeNil)
			So(ty.String(), ShouldEqual, "string(FLOAT)")
			So(df.GetDataForm(), ShouldEqual, model.DfScalar)
			So(res.GetDataType(), ShouldEqual, model.DtFloat)
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_UpLoad_Datatype_double(t *testing.T) {
	Convey("Test_scalar_double_upload:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_double:", func() {
			dt, _ := model.NewDataType(model.DtDouble, float64(28.504875))
			s := model.NewScalar(dt)
			df, _ := db.Upload(map[string]model.DataForm{"s": s})
			res, err := db.RunScript("s")
			ty, _ := db.RunScript("typestr(s)")
			re := res.(*model.Scalar)
			So(re.Value(), ShouldEqual, 28.504875)
			So(res, ShouldResemble, s)
			So(err, ShouldBeNil)
			So(ty.String(), ShouldEqual, "string(DOUBLE)")
			So(df.GetDataForm(), ShouldEqual, model.DfScalar)
			So(res.GetDataType(), ShouldEqual, model.DtDouble)
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_UpLoad_Datatype_string(t *testing.T) {
	Convey("Test_scalar_string_upload:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_string:", func() {
			dt, _ := model.NewDataType(model.DtString, "特殊hello")
			s := model.NewScalar(dt)
			df, _ := db.Upload(map[string]model.DataForm{"s": s})
			res, err := db.RunScript("s")
			ty, _ := db.RunScript("typestr(s)")
			re := res.(*model.Scalar)
			So(re.Value(), ShouldEqual, "特殊hello")
			So(res, ShouldResemble, s)
			So(err, ShouldBeNil)
			So(ty.String(), ShouldEqual, "string(STRING)")
			So(df.GetDataForm(), ShouldEqual, model.DfScalar)
			So(res.GetDataType(), ShouldEqual, model.DtString)
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_UpLoad_Datatype_uuid(t *testing.T) {
	Convey("Test_scalar_uuid_upload:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_uuid:", func() {
			dt, _ := model.NewDataType(model.DtUUID, "5d212a78-cc48-e3b1-4235-b4d91473ee87")
			s := model.NewScalar(dt)
			df, _ := db.Upload(map[string]model.DataForm{"s": s})
			res, err := db.RunScript("s")
			ty, _ := db.RunScript("typestr(s)")
			re := res.(*model.Scalar)
			So(re.Value(), ShouldEqual, "5d212a78-cc48-e3b1-4235-b4d91473ee87")
			So(res, ShouldResemble, s)
			So(err, ShouldBeNil)
			So(ty.String(), ShouldEqual, "string(UUID)")
			So(df.GetDataForm(), ShouldEqual, model.DfScalar)
			So(res.GetDataType(), ShouldEqual, model.DtUUID)
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_UpLoad_Datatype_code(t *testing.T) {
	Convey("Test_scalar_code_upload:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_code:", func() {
			dt, _ := model.NewDataType(model.DtCode, "<1+2>")
			s := model.NewScalar(dt)
			df, _ := db.Upload(map[string]model.DataForm{"s": s})
			res, err := db.RunScript("s")
			ty, _ := db.RunScript("typestr(s)")
			re := res.(*model.Scalar)
			So(re.Value(), ShouldEqual, "<1+2>")
			So(err, ShouldBeNil)
			So(ty.String(), ShouldEqual, "string(STRING)")
			So(df.GetDataForm(), ShouldEqual, model.DfScalar)
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_UpLoad_Datatype_int128(t *testing.T) {
	Convey("Test_scalar_int128_upload:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_int128:", func() {
			dt, _ := model.NewDataType(model.DtInt128, "e1671797c52e15f763380b45e841ec32")
			s := model.NewScalar(dt)
			df, _ := db.Upload(map[string]model.DataForm{"s": s})
			res, err := db.RunScript("s")
			ty, _ := db.RunScript("typestr(s)")
			re := res.(*model.Scalar)
			So(re.Value(), ShouldEqual, "e1671797c52e15f763380b45e841ec32")
			So(res, ShouldResemble, s)
			So(err, ShouldBeNil)
			So(ty.String(), ShouldEqual, "string(INT128)")
			So(df.GetDataForm(), ShouldEqual, model.DfScalar)
			So(res.GetDataType(), ShouldEqual, model.DtInt128)
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_UpLoad_Datatype_scalar(t *testing.T) {
	Convey("Test_scalar_ipaddr_upload:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_ipaddr:", func() {
			dt, _ := model.NewDataType(model.DtIP, "168.130.1.13")
			s := model.NewScalar(dt)
			df, _ := db.Upload(map[string]model.DataForm{"s": s})
			res, err := db.RunScript("s")
			ty, _ := db.RunScript("typestr(s)")
			re := res.(*model.Scalar)
			So(re.Value(), ShouldEqual, "168.130.1.13")
			So(res, ShouldResemble, s)
			So(err, ShouldBeNil)
			So(ty.String(), ShouldEqual, "string(IPADDR)")
			So(df.GetDataForm(), ShouldEqual, model.DfScalar)
			So(res.GetDataType(), ShouldEqual, model.DtIP)
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_UpLoad_Datatype_ipaddr(t *testing.T) {
	Convey("Test_scalar_ipaddr_upload:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_ipaddr:", func() {
			dt, _ := model.NewDataType(model.DtBlob, []byte{12})
			s := model.NewScalar(dt)
			df, _ := db.Upload(map[string]model.DataForm{"s": s})
			res, err := db.RunScript("s")
			ty, _ := db.RunScript("typestr(s)")
			re := res.(*model.Scalar)
			So(re.Value(), ShouldResemble, []uint8{12})
			So(res, ShouldResemble, s)
			So(err, ShouldBeNil)
			So(ty.String(), ShouldEqual, "string(BLOB)")
			So(df.GetDataForm(), ShouldEqual, model.DfScalar)
			So(res.GetDataType(), ShouldEqual, model.DtBlob)
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_UpLoad_Datatype_complex(t *testing.T) {
	Convey("Test_scalar_complex_upload:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_complex:", func() {
			dt, _ := model.NewDataType(model.DtComplex, [2]float64{12, 25})
			s := model.NewScalar(dt)
			df, _ := db.Upload(map[string]model.DataForm{"s": s})
			res, err := db.RunScript("s")
			ty, _ := db.RunScript("typestr(s)")
			re := res.(*model.Scalar)
			So(re.Value(), ShouldEqual, "12.00000+25.00000i")
			So(res, ShouldResemble, s)
			So(err, ShouldBeNil)
			So(ty.String(), ShouldEqual, "string(COMPLEX)")
			So(df.GetDataForm(), ShouldEqual, model.DfScalar)
			So(res.GetDataType(), ShouldEqual, model.DtComplex)
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_UpLoad_Datatype_point(t *testing.T) {
	Convey("Test_scalar_point_upload:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_point:", func() {
			dt, _ := model.NewDataType(model.DtPoint, [2]float64{32, -25})
			s := model.NewScalar(dt)
			df, _ := db.Upload(map[string]model.DataForm{"s": s})
			res, err := db.RunScript("s")
			ty, _ := db.RunScript("typestr(s)")
			re := res.(*model.Scalar)
			So(re.Value(), ShouldEqual, "(32.00000, -25.00000)")
			So(res, ShouldResemble, s)
			So(err, ShouldBeNil)
			So(ty.String(), ShouldEqual, "string(POINT)")
			So(df.GetDataForm(), ShouldEqual, model.DfScalar)
			So(res.GetDataType(), ShouldEqual, model.DtPoint)
		})
		So(db.Close(), ShouldBeNil)
	})
}
func Test_Scalar_UpLoad_Datatype_duration(t *testing.T) {
	Convey("Test_scalar_duration_upload:", t, func() {
		db, err := api.NewSimpleDolphinDBClient(context.TODO(), setup.Address, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Test_scalar_duration:", func() {
			dt, _ := model.NewDataType(model.DtDuration, "1H")
			s := model.NewScalar(dt)
			df, _ := db.Upload(map[string]model.DataForm{"s": s})
			res, err := db.RunScript("s")
			ty, _ := db.RunScript("typestr(s)")
			re := res.(*model.Scalar)
			So(re.Value(), ShouldEqual, "1H")
			So(res, ShouldResemble, s)
			So(err, ShouldBeNil)
			So(ty.String(), ShouldEqual, "string(DURATION)")
			So(df.GetDataForm(), ShouldEqual, model.DfScalar)
			So(res.GetDataType(), ShouldEqual, model.DtDuration)
		})
		So(db.Close(), ShouldBeNil)
	})
}

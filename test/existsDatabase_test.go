package test

import (
	"context"
	"testing"

	"github.com/dolphindb/api-go/api"
	"github.com/dolphindb/api-go/model"
	"github.com/dolphindb/api-go/test/setup"
	. "github.com/smartystreets/goconvey/convey"
)

var host7 = getRandomClusterAddress()
func TestExistDatabaseAndDropDatabase(t *testing.T) {
	t.Parallel()
	Convey("Test ExistDatabase and dropDatabase prepare", t, func() {
		ddb, err := api.NewSimpleDolphinDBClient(context.TODO(), host7, setup.UserName, setup.Password)
		So(err, ShouldBeNil)
		Convey("Drop all Databases", func() {
			DfsDBPath := "dfs://" + generateRandomString(8)
			dbPaths := []string{DfsDBPath, DiskDBPath}
			for _, dbPath := range dbPaths {
				script := `
				if(existsDatabase("` + dbPath + `")){
						dropDatabase("` + dbPath + `")
				}
				if(exists("` + dbPath + `")){
					rmdir("` + dbPath + `", true)
				}
				`
				_, err = ddb.RunScript(script)
				So(err, ShouldBeNil)
				re, err := ddb.RunScript(`existsDatabase("` + dbPath + `")`)
				So(err, ShouldBeNil)
				isExitsDatabase := re.(*model.Scalar).DataType.Value()
				So(isExitsDatabase, ShouldBeFalse)
			}
		})
		Convey("Test_ExistDatabase_wrong_db_exception", func() {
			_, err := ddb.RunScript(`existsDatabase(shjbdj)`)
			So(err, ShouldNotBeNil)
		})
		Convey("Test_ExistDatabase_and_dropDatabase_dfs_dimension:", func() {
			DfsDBPath := "dfs://" + generateRandomString(8)
			re1, err := ExistsDatabase(ddb, DfsDBPath)
			So(err, ShouldBeNil)
			So(re1, ShouldBeFalse)
			CreateDfsDimensiondb(DfsDBPath, TbName1, TbName2)
			re2, err := ExistsDatabase(ddb, DfsDBPath)
			So(err, ShouldBeNil)
			So(re2, ShouldBeTrue)
			err = DropDatabase(ddb, DfsDBPath)
			So(err, ShouldBeNil)
			re3, err := ExistsDatabase(ddb, DfsDBPath)
			So(err, ShouldBeNil)
			So(re3, ShouldBeFalse)
		})
		Convey("Test_ExistDatabase_and_dropDatabase_dfs_range:", func() {
			DfsDBPath := "dfs://" + generateRandomString(8)
			re1, err := ExistsDatabase(ddb, DfsDBPath)
			So(err, ShouldBeNil)
			So(re1, ShouldBeFalse)
			CreateDfsRangedb(DfsDBPath, DfsTBName1, DfsTBName2)
			re2, err := ExistsDatabase(ddb, DfsDBPath)
			So(err, ShouldBeNil)
			So(re2, ShouldBeTrue)
			err = DropDatabase(ddb, DfsDBPath)
			So(err, ShouldBeNil)
			re3, err := ExistsDatabase(ddb, DfsDBPath)
			So(err, ShouldBeNil)
			So(re3, ShouldBeFalse)
		})
		Convey("Test_ExistDatabase_and_dropDatabase_dfs_hash:", func() {
			DfsDBPath := "dfs://" + generateRandomString(8)
			re1, err := ExistsDatabase(ddb, DfsDBPath)
			So(err, ShouldBeNil)
			So(re1, ShouldBeFalse)
			CreateDfsHashdb(DfsDBPath, DfsTBName1, DfsTBName2)
			re2, err := ExistsDatabase(ddb, DfsDBPath)
			So(err, ShouldBeNil)
			So(re2, ShouldBeTrue)
			err = DropDatabase(ddb, DfsDBPath)
			So(err, ShouldBeNil)
			re3, err := ExistsDatabase(ddb, DfsDBPath)
			So(err, ShouldBeNil)
			So(re3, ShouldBeFalse)
		})
		Convey("Test_ExistDatabase_and_dropDatabase_dfs_value:", func() {
			DfsDBPath := "dfs://" + generateRandomString(8)
			re1, err := ExistsDatabase(ddb, DfsDBPath)
			So(err, ShouldBeNil)
			So(re1, ShouldBeFalse)
			CreateDfsValuedb(DfsDBPath, DfsTBName1, DfsTBName2)
			re2, err := ExistsDatabase(ddb, DfsDBPath)
			So(err, ShouldBeNil)
			So(re2, ShouldBeTrue)
			err = DropDatabase(ddb, DfsDBPath)
			So(err, ShouldBeNil)
			re3, err := ExistsDatabase(ddb, DfsDBPath)
			So(err, ShouldBeNil)
			So(re3, ShouldBeFalse)
		})
		Convey("Test_ExistDatabase_and_dropDatabase_dfs_list:", func() {
			DfsDBPath := "dfs://" + generateRandomString(8)
			re1, err := ExistsDatabase(ddb, DfsDBPath)
			So(err, ShouldBeNil)
			So(re1, ShouldBeFalse)
			CreateDfsListdb(DfsDBPath, DfsTBName1, DfsTBName2)
			re2, err := ExistsDatabase(ddb, DfsDBPath)
			So(err, ShouldBeNil)
			So(re2, ShouldBeTrue)
			err = DropDatabase(ddb, DfsDBPath)
			So(err, ShouldBeNil)
			re3, err := ExistsDatabase(ddb, DfsDBPath)
			So(err, ShouldBeNil)
			So(re3, ShouldBeFalse)
		})
		Convey("Test_ExistDatabase_and_dropDatabase_dfs_compo_range_range:", func() {
			DfsDBPath := "dfs://" + generateRandomString(8)
			re1, err := ExistsDatabase(ddb, DfsDBPath)
			So(err, ShouldBeNil)
			So(re1, ShouldBeFalse)
			CreateDfsCompoRangeRangedb(DfsDBPath, DfsTBName1, DfsTBName2)
			re2, err := ExistsDatabase(ddb, DfsDBPath)
			So(err, ShouldBeNil)
			So(re2, ShouldBeTrue)
			err = DropDatabase(ddb, DfsDBPath)
			So(err, ShouldBeNil)
			re3, err := ExistsDatabase(ddb, DfsDBPath)
			So(err, ShouldBeNil)
			So(re3, ShouldBeFalse)
		})
		Convey("Test_ExistDatabase_and_dropDatabase_dfs_compo_range_value:", func() {
			DfsDBPath := "dfs://" + generateRandomString(8)
			re1, err := ExistsDatabase(ddb, DfsDBPath)
			So(err, ShouldBeNil)
			So(re1, ShouldBeFalse)
			CreateDfsCompoRangeValuedb(DfsDBPath, DfsTBName1, DfsTBName2)
			re2, err := ExistsDatabase(ddb, DfsDBPath)
			So(err, ShouldBeNil)
			So(re2, ShouldBeTrue)
			err = DropDatabase(ddb, DfsDBPath)
			So(err, ShouldBeNil)
			re3, err := ExistsDatabase(ddb, DfsDBPath)
			So(err, ShouldBeNil)
			So(re3, ShouldBeFalse)
		})
		Convey("Test_ExistDatabase_and_dropDatabase_dfs_compo_range_list:", func() {
			DfsDBPath := "dfs://" + generateRandomString(8)
			re1, err := ExistsDatabase(ddb, DfsDBPath)
			So(err, ShouldBeNil)
			So(re1, ShouldBeFalse)
			CreateDfsCompoRangeListdb(DfsDBPath, DfsTBName1, DfsTBName2)
			re2, err := ExistsDatabase(ddb, DfsDBPath)
			So(err, ShouldBeNil)
			So(re2, ShouldBeTrue)
			err = DropDatabase(ddb, DfsDBPath)
			So(err, ShouldBeNil)
			re3, err := ExistsDatabase(ddb, DfsDBPath)
			So(err, ShouldBeNil)
			So(re3, ShouldBeFalse)
		})
		Convey("Test_ExistDatabase_and_dropDatabase_dfs_compo_range_hash:", func() {
			DfsDBPath := "dfs://" + generateRandomString(8)
			re1, err := ExistsDatabase(ddb, DfsDBPath)
			So(err, ShouldBeNil)
			So(re1, ShouldBeFalse)
			CreateDfsCompoRangeHashdb(DfsDBPath, DfsTBName1, DfsTBName2)
			re2, err := ExistsDatabase(ddb, DfsDBPath)
			So(err, ShouldBeNil)
			So(re2, ShouldBeTrue)
			err = DropDatabase(ddb, DfsDBPath)
			So(err, ShouldBeNil)
			re3, err := ExistsDatabase(ddb, DfsDBPath)
			So(err, ShouldBeNil)
			So(re3, ShouldBeFalse)
		})
		Convey("Test_ExistDatabase_and_dropDatabase_disk_unpartitioned_table:", func() {
			re1, err := ExistsDatabase(ddb, DiskDBPath)
			So(err, ShouldBeNil)
			So(re1, ShouldBeFalse)
			CreateDiskUnpartitioneddb(DiskDBPath, TbName1, TbName2)
			re2, err := ExistsTable(ddb, DiskDBPath, TbName1)
			So(err, ShouldBeNil)
			So(re2, ShouldBeTrue)
			err = DropDatabase(ddb, DiskDBPath)
			So(err, ShouldBeNil)
			re3, err := ExistsDatabase(ddb, DiskDBPath)
			So(err, ShouldBeNil)
			So(re3, ShouldBeFalse)
		})
		Convey("Test_ExistDatabase_and_dropDatabase_create_disk_range_db:", func() {
			re1, err := ExistsDatabase(ddb, DiskDBPath)
			So(err, ShouldBeNil)
			So(re1, ShouldBeFalse)
			CreateDiskRangedb(DiskDBPath, DfsTBName1, DfsTBName2)
			re2, err := ExistsTable(ddb, DiskDBPath, DfsTBName1)
			So(err, ShouldBeNil)
			So(re2, ShouldBeTrue)
			err = DropDatabase(ddb, DiskDBPath)
			So(err, ShouldBeNil)
			re3, err := ExistsDatabase(ddb, DiskDBPath)
			So(err, ShouldBeNil)
			So(re3, ShouldBeFalse)
		})
		Convey("Test_ExistDatabase_and_dropDatabase_create_disk_hash_db:", func() {
			re1, err := ExistsDatabase(ddb, DiskDBPath)
			So(err, ShouldBeNil)
			So(re1, ShouldBeFalse)
			CreateDiskHashdb(DiskDBPath, DfsTBName1, DfsTBName2)
			re2, err := ExistsTable(ddb, DiskDBPath, DfsTBName1)
			So(err, ShouldBeNil)
			So(re2, ShouldBeTrue)
			err = DropDatabase(ddb, DiskDBPath)
			So(err, ShouldBeNil)
			re3, err := ExistsDatabase(ddb, DiskDBPath)
			So(err, ShouldBeNil)
			So(re3, ShouldBeFalse)
		})
		Convey("Test_ExistDatabase_and_dropDatabase_create_disk_value_db:", func() {
			re1, err := ExistsDatabase(ddb, DiskDBPath)
			So(err, ShouldBeNil)
			So(re1, ShouldBeFalse)
			CreateDiskValuedb(DiskDBPath, DfsTBName1, DfsTBName2)
			re2, err := ExistsTable(ddb, DiskDBPath, DfsTBName1)
			So(err, ShouldBeNil)
			So(re2, ShouldBeTrue)
			err = DropDatabase(ddb, DiskDBPath)
			So(err, ShouldBeNil)
			re3, err := ExistsDatabase(ddb, DiskDBPath)
			So(err, ShouldBeNil)
			So(re3, ShouldBeFalse)
		})
		Convey("Test_ExistDatabase_and_dropDatabase_create_disk_list_db:", func() {
			re1, err := ExistsDatabase(ddb, DiskDBPath)
			So(err, ShouldBeNil)
			So(re1, ShouldBeFalse)
			CreateDiskListdb(DiskDBPath, DfsTBName1, DfsTBName2)
			re2, err := ExistsTable(ddb, DiskDBPath, DfsTBName1)
			So(err, ShouldBeNil)
			So(re2, ShouldBeTrue)
			err = DropDatabase(ddb, DiskDBPath)
			So(err, ShouldBeNil)
			re3, err := ExistsDatabase(ddb, DiskDBPath)
			So(err, ShouldBeNil)
			So(re3, ShouldBeFalse)
		})
		Convey("Test_ExistDatabase_and_dropDatabase_create_compo_range_range_db:", func() {
			re1, err := ExistsDatabase(ddb, DiskDBPath)
			So(err, ShouldBeNil)
			So(re1, ShouldBeFalse)
			CreateDiskCompoRangeRangedb(DiskDBPath, DfsTBName1, DfsTBName2)
			re2, err := ExistsTable(ddb, DiskDBPath, DfsTBName1)
			So(err, ShouldBeNil)
			So(re2, ShouldBeTrue)
			err = DropDatabase(ddb, DiskDBPath)
			So(err, ShouldBeNil)
			re3, err := ExistsDatabase(ddb, DiskDBPath)
			So(err, ShouldBeNil)
			So(re3, ShouldBeFalse)
		})
	})
}
